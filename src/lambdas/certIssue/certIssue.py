"""
Certificate Issuance Lambda

This Lambda function requests signed certificates from AWS Private Certificate Authority (PCA)
using Certificate Signing Requests (CSRs) generated by the CSR generation process.

The function extracts CSRs from the async workflow output provided by certCSRStatus,
validates them, and submits them to AWS PCA for signing.
"""

import json
import boto3
import time
import os
import logging
import re
import shlex
from models import sanitize_host_id, sanitize_path
from error_handler import handle_lambda_error, PCAError, ValidationError, log_structured

# Configure logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize AWS clients outside handler for connection reuse across invocations
pca = boto3.client('acm-pca')
ssm = boto3.client('ssm')

def extract_csr_from_output(output: str) -> str:
    """
    Extract Certificate Signing Request from SSM command output.
    
    Searches for CSR content between standard PEM markers and cleans up
    any escaped newline characters that may be present in the output.
    
    Args:
        output (str): Raw SSM command output containing CSR
        
    Returns:
        str: Clean CSR in PEM format
        
    Raises:
        ValidationError: If no valid CSR is found in the output
    """
    csr_pattern = r'-----BEGIN CERTIFICATE REQUEST-----.*?-----END CERTIFICATE REQUEST-----'
    match = re.search(csr_pattern, output, re.DOTALL)
    if match:
        csr = match.group(0)
        # Clean up any escaped newlines from command output
        csr = csr.replace('\\n', '\n')
        return csr
    else:
        raise ValidationError("Could not find valid CSR in command output")

def main(event, context):

    # Get environment variables
    SigningAlgorithm = os.environ['SigningAlgorithm']
    PCAarn = os.environ['PCAarn']

    logger.info(f"Incoming event: {event}")

    # Extract and validate inputs
    host = sanitize_host_id(event["hostID"])
    
    # Get CSR from the async workflow
    # The CSR output must be provided by the certCSRStatus function
    if "csrOutput" not in event:
        raise ValidationError("csrOutput not found in event - certCSRStatus function must provide CSR output")
    
    csr_output = event["csrOutput"]
    csr = extract_csr_from_output(csr_output)
    command_id = event.get("commandId", "unknown")
    
    log_structured('INFO', 'CSR extracted from async workflow',
                  host_id=host,
                  command_id=command_id,
                  csr_length=len(csr))

    # Validate CSR format
    if not csr.strip().startswith('-----BEGIN CERTIFICATE REQUEST-----'):
        raise ValidationError("Invalid CSR format - missing BEGIN marker")
    
    if not csr.strip().endswith('-----END CERTIFICATE REQUEST-----'):
        raise ValidationError("Invalid CSR format - missing END marker")

    # Issue the certificate using ACM PCA
    response = pca.issue_certificate(
        CertificateAuthorityArn=PCAarn,
        Csr=csr,
        SigningAlgorithm=SigningAlgorithm,
        Validity={
            'Value': 7,
            'Type': 'DAYS'
        }
    )

    log_structured('INFO', 'Certificate issued successfully',
                  host_id=host,
                  certificate_arn=response["CertificateArn"],
                  signing_algorithm=SigningAlgorithm)
    
    return {
        "certificateArn": response["CertificateArn"],
        "hostID": host
    }

    
@handle_lambda_error
def lambda_handler(event, context):
    result = main(event, context)
    return {'statusCode': 200, 'body': result}